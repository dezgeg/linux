# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_lkl')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_lkl')
    _lkl = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_lkl', [dirname(__file__)])
        except ImportError:
            import _lkl
            return _lkl
        try:
            _mod = imp.load_module('_lkl', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _lkl = swig_import_helper()
    del swig_import_helper
else:
    import _lkl
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def lkl_sys_statfs(path, buf):
    return _lkl.lkl_sys_statfs(path, buf)
lkl_sys_statfs = _lkl.lkl_sys_statfs

def lkl_sys_fstatfs(fd, buf):
    return _lkl.lkl_sys_fstatfs(fd, buf)
lkl_sys_fstatfs = _lkl.lkl_sys_fstatfs

def lkl_sys_mmap(addr, length, prot, flags, fd, offset):
    return _lkl.lkl_sys_mmap(addr, length, prot, flags, fd, offset)
lkl_sys_mmap = _lkl.lkl_sys_mmap

def lkl_strerror(err):
    return _lkl.lkl_strerror(err)
lkl_strerror = _lkl.lkl_strerror

def lkl_perror(msg, err):
    return _lkl.lkl_perror(msg, err)
lkl_perror = _lkl.lkl_perror
class lkl_disk(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lkl_disk, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lkl_disk, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dev"] = _lkl.lkl_disk_dev_set
    __swig_getmethods__["dev"] = _lkl.lkl_disk_dev_get
    if _newclass:
        dev = _swig_property(_lkl.lkl_disk_dev_get, _lkl.lkl_disk_dev_set)
    __swig_setmethods__["fd"] = _lkl.lkl_disk_fd_set
    __swig_getmethods__["fd"] = _lkl.lkl_disk_fd_get
    if _newclass:
        fd = _swig_property(_lkl.lkl_disk_fd_get, _lkl.lkl_disk_fd_set)
    __swig_setmethods__["handle"] = _lkl.lkl_disk_handle_set
    __swig_getmethods__["handle"] = _lkl.lkl_disk_handle_get
    if _newclass:
        handle = _swig_property(_lkl.lkl_disk_handle_get, _lkl.lkl_disk_handle_set)
    __swig_setmethods__["ops"] = _lkl.lkl_disk_ops_set
    __swig_getmethods__["ops"] = _lkl.lkl_disk_ops_get
    if _newclass:
        ops = _swig_property(_lkl.lkl_disk_ops_get, _lkl.lkl_disk_ops_set)

    def __init__(self):
        this = _lkl.new_lkl_disk()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _lkl.delete_lkl_disk
    __del__ = lambda self: None
lkl_disk_swigregister = _lkl.lkl_disk_swigregister
lkl_disk_swigregister(lkl_disk)


def lkl_disk_add(disk):
    return _lkl.lkl_disk_add(disk)
lkl_disk_add = _lkl.lkl_disk_add

def lkl_disk_remove(disk):
    return _lkl.lkl_disk_remove(disk)
lkl_disk_remove = _lkl.lkl_disk_remove

def lkl_encode_dev_from_sysfs(sysfs_path, pdevid):
    return _lkl.lkl_encode_dev_from_sysfs(sysfs_path, pdevid)
lkl_encode_dev_from_sysfs = _lkl.lkl_encode_dev_from_sysfs

def lkl_get_virtio_blkdev(disk_id, part, pdevid):
    return _lkl.lkl_get_virtio_blkdev(disk_id, part, pdevid)
lkl_get_virtio_blkdev = _lkl.lkl_get_virtio_blkdev

def lkl_mount_dev(disk_id, part, fs_type, flags, opts, mnt_str, mnt_str_len):
    return _lkl.lkl_mount_dev(disk_id, part, fs_type, flags, opts, mnt_str, mnt_str_len)
lkl_mount_dev = _lkl.lkl_mount_dev

def lkl_umount_dev(disk_id, part, flags, timeout_ms):
    return _lkl.lkl_umount_dev(disk_id, part, flags, timeout_ms)
lkl_umount_dev = _lkl.lkl_umount_dev

def lkl_umount_timeout(path, flags, timeout_ms):
    return _lkl.lkl_umount_timeout(path, flags, timeout_ms)
lkl_umount_timeout = _lkl.lkl_umount_timeout

def lkl_opendir(path, err):
    return _lkl.lkl_opendir(path, err)
lkl_opendir = _lkl.lkl_opendir

def lkl_fdopendir(fd, err):
    return _lkl.lkl_fdopendir(fd, err)
lkl_fdopendir = _lkl.lkl_fdopendir

def lkl_rewinddir(dir):
    return _lkl.lkl_rewinddir(dir)
lkl_rewinddir = _lkl.lkl_rewinddir

def lkl_closedir(dir):
    return _lkl.lkl_closedir(dir)
lkl_closedir = _lkl.lkl_closedir

def lkl_readdir(dir):
    return _lkl.lkl_readdir(dir)
lkl_readdir = _lkl.lkl_readdir

def lkl_errdir(dir):
    return _lkl.lkl_errdir(dir)
lkl_errdir = _lkl.lkl_errdir

def lkl_dirfd(dir):
    return _lkl.lkl_dirfd(dir)
lkl_dirfd = _lkl.lkl_dirfd

def lkl_if_up(ifindex):
    return _lkl.lkl_if_up(ifindex)
lkl_if_up = _lkl.lkl_if_up

def lkl_if_down(ifindex):
    return _lkl.lkl_if_down(ifindex)
lkl_if_down = _lkl.lkl_if_down

def lkl_if_set_mtu(ifindex, mtu):
    return _lkl.lkl_if_set_mtu(ifindex, mtu)
lkl_if_set_mtu = _lkl.lkl_if_set_mtu

def lkl_if_set_ipv4(ifindex, addr, netmask_len):
    return _lkl.lkl_if_set_ipv4(ifindex, addr, netmask_len)
lkl_if_set_ipv4 = _lkl.lkl_if_set_ipv4

def lkl_set_ipv4_gateway(addr):
    return _lkl.lkl_set_ipv4_gateway(addr)
lkl_set_ipv4_gateway = _lkl.lkl_set_ipv4_gateway

def lkl_if_set_ipv6(ifindex, addr, netprefix_len):
    return _lkl.lkl_if_set_ipv6(ifindex, addr, netprefix_len)
lkl_if_set_ipv6 = _lkl.lkl_if_set_ipv6

def lkl_set_ipv6_gateway(addr):
    return _lkl.lkl_set_ipv6_gateway(addr)
lkl_set_ipv6_gateway = _lkl.lkl_set_ipv6_gateway
class lkl_netdev_args(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lkl_netdev_args, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lkl_netdev_args, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac"] = _lkl.lkl_netdev_args_mac_set
    __swig_getmethods__["mac"] = _lkl.lkl_netdev_args_mac_get
    if _newclass:
        mac = _swig_property(_lkl.lkl_netdev_args_mac_get, _lkl.lkl_netdev_args_mac_set)
    __swig_setmethods__["offload"] = _lkl.lkl_netdev_args_offload_set
    __swig_getmethods__["offload"] = _lkl.lkl_netdev_args_offload_get
    if _newclass:
        offload = _swig_property(_lkl.lkl_netdev_args_offload_get, _lkl.lkl_netdev_args_offload_set)

    def __init__(self):
        this = _lkl.new_lkl_netdev_args()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _lkl.delete_lkl_netdev_args
    __del__ = lambda self: None
lkl_netdev_args_swigregister = _lkl.lkl_netdev_args_swigregister
lkl_netdev_args_swigregister(lkl_netdev_args)


def lkl_netdev_add(nd, args):
    return _lkl.lkl_netdev_add(nd, args)
lkl_netdev_add = _lkl.lkl_netdev_add

def lkl_netdev_remove(id):
    return _lkl.lkl_netdev_remove(id)
lkl_netdev_remove = _lkl.lkl_netdev_remove

def lkl_netdev_free(nd):
    return _lkl.lkl_netdev_free(nd)
lkl_netdev_free = _lkl.lkl_netdev_free

def lkl_netdev_get_ifindex(id):
    return _lkl.lkl_netdev_get_ifindex(id)
lkl_netdev_get_ifindex = _lkl.lkl_netdev_get_ifindex

def lkl_netdev_tap_create(ifname, offload):
    return _lkl.lkl_netdev_tap_create(ifname, offload)
lkl_netdev_tap_create = _lkl.lkl_netdev_tap_create

def lkl_netdev_raw_create(ifname):
    return _lkl.lkl_netdev_raw_create(ifname)
lkl_netdev_raw_create = _lkl.lkl_netdev_raw_create

def lkl_netdev_macvtap_create(path, offload):
    return _lkl.lkl_netdev_macvtap_create(path, offload)
lkl_netdev_macvtap_create = _lkl.lkl_netdev_macvtap_create

def lkl_register_dbg_handler():
    return _lkl.lkl_register_dbg_handler()
lkl_register_dbg_handler = _lkl.lkl_register_dbg_handler

def lkl_add_neighbor(ifindex, af, addr, mac):
    return _lkl.lkl_add_neighbor(ifindex, af, addr, mac)
lkl_add_neighbor = _lkl.lkl_add_neighbor

def lkl_mount_fs(fstype):
    return _lkl.lkl_mount_fs(fstype)
lkl_mount_fs = _lkl.lkl_mount_fs

def lkl_if_add_ip(ifindex, af, addr, netprefix_len):
    return _lkl.lkl_if_add_ip(ifindex, af, addr, netprefix_len)
lkl_if_add_ip = _lkl.lkl_if_add_ip

def lkl_if_del_ip(ifindex, af, addr, netprefix_len):
    return _lkl.lkl_if_del_ip(ifindex, af, addr, netprefix_len)
lkl_if_del_ip = _lkl.lkl_if_del_ip

def lkl_if_wait_ipv6_dad(ifindex, addr):
    return _lkl.lkl_if_wait_ipv6_dad(ifindex, addr)
lkl_if_wait_ipv6_dad = _lkl.lkl_if_wait_ipv6_dad

def lkl_set_fd_limit(fd_limit):
    return _lkl.lkl_set_fd_limit(fd_limit)
lkl_set_fd_limit = _lkl.lkl_set_fd_limit

def lkl_qdisc_add(ifindex, root, type):
    return _lkl.lkl_qdisc_add(ifindex, root, type)
lkl_qdisc_add = _lkl.lkl_qdisc_add

def lkl_qdisc_parse_add(ifindex, entries):
    return _lkl.lkl_qdisc_parse_add(ifindex, entries)
lkl_qdisc_parse_add = _lkl.lkl_qdisc_parse_add

def lkl_sysctl(path, value):
    return _lkl.lkl_sysctl(path, value)
lkl_sysctl = _lkl.lkl_sysctl

def lkl_sysctl_parse_write(sysctls):
    return _lkl.lkl_sysctl_parse_write(sysctls)
lkl_sysctl_parse_write = _lkl.lkl_sysctl_parse_write
# This file is compatible with both classic and new-style classes.


